###################################################
###                A L I A S E S                ###
###################################################

# update mirrors
alias update-mirrors="reflector --country germany --latest 10 --sort rate --save /etc/pacman.d/mirrorlist"

# instant edit configs
alias edit_zshconfig='"$EDITOR" $XDG_CONFIG_HOME/zsh/.zshrc.local'
alias edit_zshaliases='"$EDITOR" $XDG_CONFIG_HOME/zsh/.zshaliases'
alias edit_zshenv='"$EDITOR" $XDG_CONFIG_HOME/zsh/.zshenv'

# networking
alias wifi-rescan="nmcli device wifi rescan"
alias wifi-list="nmcli device wifi list"
alias wifi-connect="nmcli device wifi connect"

## rebinds
# neovim
alias nv="nvim"

# ls
alias eza="eza --icons=always --color=always"
alias ls="eza --group-directories-first"
alias la="eza -lago --total-size --group-directories-first"
alias laa="eza -laghiuUo --changed --total-size --group-directories-first"
alias lss="/usr/bin/ls"

# grep
alias grep="grep --color=always"

# bat
alias bat="bat --theme=\"1337\" --style=\"header-filename,header-filesize,rule\""

# tmux
alias t="tmux new-session -A -s default"
alias tma="tmux attach -t"
alias tmd="tmux detach"
alias tmk="tmux kill-session -t"
alias tml="tmux list-sessions"
alias tmn="tmux new-session -s"

# copy to ...
alias clipboard="xclip -selection clipboard" # copy terminal stuff with 'cat file | clipboard'
alias clip="clipboard"
alias pastebin="curl -F 'file=@-' 0x0.st"
alias paste="pastebin"

# keep $HOME clean rebinds (xdg-ninja)
alias nvidia-settings='nvidia-settings --config="$XDG_CONFIG_HOME"/nvidia/settings'
alias wget='wget --hsts-file="$XDG_DATA_HOME"/wget-hsts'
alias adb='HOME="$XDG_DATA_HOME"/android adb'

# 'temporary' (lol!)
alias python='python3'

# kitty specific aliases
if [[ -n "$KITTY_INSTALLATION_DIR" ]] ; then
    alias kssh="kitten ssh"
    alias icat="kitten icat"
    alias kdiff="kitten diff"
fi


###################################################
###              F U N C T I O N S              ###
###################################################

# Weather
weather () {
    curl "wttr.in/$1?format=3"
}

# Print a motd in non-login shell
motd-interactive-shell () {
  motd_timeout=86400 # 24 hours
  timestamp_file="$XDG_CACHE_HOME/interactive-shell-motd"

  if [[ -e "$timestamp_file" ]] ; then
    last_motd_timestamp=$(cat "$timestamp_file")
    current_timestamp=$(date +%s)
    time_diff=$((current_timestamp - last_motd_timestamp))
    #echo "time until next motd:" $time_diff

    if [[ "$time_diff" -ge $motd_timeout ]] ; then
      echo "$current_timestamp" > "$timestamp_file"
      cat /etc/motd
    fi
  else
    # if timestamp file doesn't exist, create it
    date +%s > "$timestamp_file"
    cat /etc/motd
  fi
}

# Generate random pin
gen-pin () {
  length=$1
  if [[ "$length" == "" ]] ; then
    length=4
  fi
  tr -dc '0-9' < /dev/urandom | fold -w"$length" | head -10
}

# Checks if all environment variables exist, if not warn and return 1
check-env-vars () {
  error=0
  for arg in "$@"; do
    if ! declare -p "$arg" >/dev/null 2>&1 ; then
        echo -e "\e[33m[Warning]\e[0m The environment variable '$arg' doesn't exists."
        error=1
    fi
  done
  return $error
}

# Manage e-mail aliases on migadu
email-alias () {
  if ! check-env-vars MIGADU_USER MIGADU_TOKEN ALIAS_DOMAIN ALIAS_DESTINATION ; then
    return
  fi

  case "$1" in
    create|c)
      if [[ "$2" == "" ]] ; then
        echo "please provide an alias"
        return
      fi

      RANDOM_NUMBER=$(tr -dc '0-9' < /dev/urandom | fold -w4 | head -1)
      ALIAS_NAME="${2}-${RANDOM_NUMBER}"
      echo "$ALIAS_NAME@$ALIAS_DOMAIN -> $ALIAS_DESTINATION@$ALIAS_DOMAIN"

      OUTPUT=$(curl -s -u "$MIGADU_USER:$MIGADU_TOKEN" \
        -d "{\"local_part\":\"$ALIAS_NAME\", \"destinations\": \"$ALIAS_DESTINATION@$ALIAS_DOMAIN\"}" \
        -X POST "https://api.migadu.com/v1/domains/$ALIAS_DOMAIN/aliases" \
        -H "Content-Type:application/json")
      echo "$OUTPUT" | jq
      ;;
    list|l)
      OUTPUT=$(curl -s -u "$MIGADU_USER:$MIGADU_TOKEN" \
        "https://api.migadu.com/v1/domains/$ALIAS_DOMAIN/aliases")
      echo "$OUTPUT" | jq -r '.address_aliases[] | "\(.address) -> \(.destinations | join(", "))"'
      ;;
    *)
      echo "usage: $0 [create|list] [opt]"
      ;;
  esac
}

